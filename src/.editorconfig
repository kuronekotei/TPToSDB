# EditorConfig is awesome:http://EditorConfig.org

# top-most EditorConfig file
root = true

[*]
# タブによるインデント
indent_style = tab
tab_size = 4
indent_size = 4

# その他ファイル設定
trim_trailing_whitespace	= true
insert_final_newline		= true
end_of_line					= crlf




# Dotnet code style settings:
[*.{cs,vb}]
# Code style defaults
dotnet_sort_system_directives_first			= true
csharp_preserve_single_line_blocks			= true
csharp_preserve_single_line_statements		= false

# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field						= false : suggestion
dotnet_style_qualification_for_property						= false : suggestion
dotnet_style_qualification_for_method						= false : suggestion
dotnet_style_qualification_for_event						= false : suggestion

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members	= true : suggestion
dotnet_style_predefined_type_for_member_access				= true : suggestion

# Suggest more modern language features when available
dotnet_style_object_initializer								= true : suggestion
dotnet_style_collection_initializer							= true : suggestion
dotnet_style_coalesce_expression							= true : suggestion
dotnet_style_null_propagation								= true : suggestion
dotnet_style_explicit_tuple_names							= true : suggestion


# CSharp code style settings:
[*.cs]
# Prefer "var" everywhere
csharp_style_var_for_built_in_types						= false : none
csharp_style_var_when_type_is_apparent					= false : none
csharp_style_var_elsewhere								= false : none

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods					= false : none
csharp_style_expression_bodied_constructors				= false : none
csharp_style_expression_bodied_operators				= false : none

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties				= false : none
csharp_style_expression_bodied_indexers					= false : none
csharp_style_expression_bodied_accessors				= false : none

# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check	= true : suggestion
csharp_style_pattern_matching_over_as_with_null_check	= true : suggestion
csharp_style_inlined_variable_declaration				= true : suggestion
csharp_style_throw_expression							= true : suggestion
csharp_style_conditional_delegate_call					= true : suggestion

# Newline settings
csharp_new_line_before_open_brace						= none
csharp_new_line_before_else								= false
csharp_new_line_before_catch							= false
csharp_new_line_before_finally							= false
csharp_new_line_before_members_in_object_initializers	= false
csharp_new_line_before_members_in_anonymous_types		= false

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left


# Space preferences
#区切り記号のスペース
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_semicolon_in_for_statement = false
#大かっこ
csharp_space_before_open_square_brackets = false
csharp_space_between_square_brackets = false
csharp_space_between_empty_square_brackets = false

csharp_space_after_cast = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
#バイナリ演算子前後のスペース
csharp_space_around_binary_operators = ignore
#宣言ステートメント内のスペース
csharp_space_around_declaration_statements = ignore









#
#
#
#
## Pascal命名規則の適用
#dotnet_naming_rule.RULE_PASCAL.severity = error
#dotnet_naming_rule.RULE_PASCAL.symbols  = SYMBOL_PASCAL
#dotnet_naming_rule.RULE_PASCAL.style    = STYLE_PASCAL
#
#dotnet_naming_symbols.SYMBOL_PASCAL.applicable_kinds   = class, struct, method, event, delegate
#
### Pascalスタイル Pascalは別名UpperCamelCase
#dotnet_naming_style.STYLE_PASCAL.capitalization = pascal_case 
#
#
#
## Enum命名規則の適用
#dotnet_naming_rule.RULE_ENUM.severity = error
#dotnet_naming_rule.RULE_ENUM.symbols  = SYMBOL_ENUM
#dotnet_naming_rule.RULE_ENUM.style    = STYLE_ENUM
#
#dotnet_naming_symbols.SYMBOL_ENUM.applicable_kinds   = enum
#
### Enum用スタイル pascalにしないとprefixは効果がない pascalでも、日本語名が設定可能
#dotnet_naming_style.STYLE_ENUM.required_prefix = E
#dotnet_naming_style.STYLE_ENUM.capitalization  = pascal_case
#
#
#
## Interface命名規則の適用
#dotnet_naming_rule.RULE_INTERFACE.severity = error
#dotnet_naming_rule.RULE_INTERFACE.symbols  = SYMBOL_INTERFACE
#dotnet_naming_rule.RULE_INTERFACE.style    = STYLE_INTERFACE
#
#dotnet_naming_symbols.SYMBOL_INTERFACE.applicable_kinds   = interface
#
### Interface用スタイル pascalにしないとprefixは効果がない
#dotnet_naming_style.STYLE_INTERFACE.required_prefix = I
#dotnet_naming_style.STYLE_INTERFACE.capitalization  = pascal_case
#
#
#
#
#
#
#